buildscript {
    ext {
        springBootVersion = '1.5.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'app'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-actuator')
    compile 'io.springfox:springfox-swagger2:2.6.1'
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile 'io.springfox:springfox-staticdocs:2.6.1'
}

def SWAGGER_JSON_FILE = 'publications/swagger.json';
def SWAGGER_CLIENT_DIR = '../frontend/src/swagger';

task generateSwaggerSpec(type: Test, dependsOn: testClasses) {
    inputs.files fileTree('src/main/java')
    outputs.file file(SWAGGER_JSON_FILE)
    filter {
        includeTestsMatching "app.SwaggerSpecGenerator"
    }
}

configurations {
    swaggercodegen
}

dependencies {
    swaggercodegen 'io.swagger:swagger-codegen-cli:2.2.1'
}

task cleanSwaggerCodegen(type: Delete) {
    delete fileTree(SWAGGER_CLIENT_DIR).include('*/*')
}

task swaggerCodegen(type: JavaExec) {
    inputs.file file(SWAGGER_JSON_FILE)
    outputs.dir file(SWAGGER_CLIENT_DIR)
    classpath = configurations.swaggercodegen
    main = 'io.swagger.codegen.SwaggerCodegen'
        args('generate',
        '-l', 'typescript-angular2',
        '-i', SWAGGER_JSON_FILE,
        '-o', SWAGGER_CLIENT_DIR)
}

task npmInstall(type:Exec) {
    inputs.file file('../frontend/package.json')
    outputs.dir file('../frontend/node_modules')
    workingDir '../frontend'
    ant.condition(property: "isWindows", value: true) { os(family: "windows") }
    commandLine(ant.properties.isWindows ?
        ['cmd', '/c', 'npm', 'install'] :
        ['npm', 'install'])
}

task compileFrontend(type:Exec) {
    inputs.files fileTree('../frontend/src')
    outputs.dir file('build/resources/main/static')
    workingDir '../frontend'
    ant.condition(property: "isWindows", value: true) { os(family: "windows") }
    commandLine(ant.properties.isWindows ?
        ['cmd', '/c', 'npm', 'run', 'buildProduction'] :
        ['npm', 'run', 'buildProduction'])
}

swaggerCodegen.dependsOn generateSwaggerSpec
compileFrontend.dependsOn npmInstall
compileFrontend.dependsOn swaggerCodegen
jar.dependsOn compileFrontend
bootRun.dependsOn compileFrontend


