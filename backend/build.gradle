buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {url "https://plugins.gradle.org/m2/"}
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"
        classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.moowork.node'

jar {
    baseName = 'app'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-actuator')
    compile('io.springfox:springfox-swagger2:2.6.1')
    compile('org.seasar.doma:doma:2.16.0')
    compileOnly('org.projectlombok:lombok')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile 'io.springfox:springfox-staticdocs:2.6.1'
}

def FRONTEND_DIR = "${project.rootDir}/../frontend";
def SWAGGER_JSON_FILE = "${project.rootDir}/publications/swagger.json";
def SWAGGER_CLIENT_DIR = "${FRONTEND_DIR}/src/swagger";

task generateSwaggerSpec(type: Test, dependsOn: testClasses) {
    inputs.files fileTree("${project.rootDir}/src/main/java")
    outputs.file file(SWAGGER_JSON_FILE)
    filter {
        includeTestsMatching "app.SwaggerSpecGenerator"
    }
}

configurations {
    swaggercodegen
}

dependencies {
    swaggercodegen 'io.swagger:swagger-codegen-cli:2.2.1' // skip 2.2.2
}

task cleanSwaggerCodegen(type: Delete) {
    delete fileTree(SWAGGER_CLIENT_DIR).include('*/*')
}

task swaggerCodegen(type: JavaExec) {
    inputs.file file(SWAGGER_JSON_FILE)
    outputs.dir file(SWAGGER_CLIENT_DIR)
    classpath = configurations.swaggercodegen
    main = 'io.swagger.codegen.SwaggerCodegen'
        args('generate',
        '-l', 'typescript-angular2',
        '-i', SWAGGER_JSON_FILE,
        '-o', SWAGGER_CLIENT_DIR)
}

node {
    workDir = file(FRONTEND_DIR)
    nodeModulesDir = file(FRONTEND_DIR)
}

// task npmInstall(type: NpmTask) {
//    inputs.file file("${FRONTEND_DIR}/package.json")
//    outputs.dir file("${FRONTEND_DIR}/node_modules")
//    args = ['install'];
// }

task compileFrontend(type: NpmTask) {
    inputs.files fileTree("${FRONTEND_DIR}/src")
    outputs.dir file("${project.rootDir}/build/resources/main/static")
    args = ['run', 'build'];
}

swaggerCodegen.dependsOn generateSwaggerSpec
swaggerCodegen.dependsOn cleanSwaggerCodegen
compileFrontend.dependsOn npmInstall
compileFrontend.dependsOn swaggerCodegen
jar.dependsOn compileFrontend
bootRun.dependsOn compileFrontend

// git information for actuator

apply plugin: 'com.gorylenko.gradle-git-properties'

gitProperties {
    gitRepositoryRoot = new File("${project.rootDir}/..")
}

// eclipse


eclipse {
    copy {
        from 'eclipse/org.eclipse.core.resources.prefs'
        into '.settings'
    }
    copy{
        from 'eclipse/org.eclipse.core.runtime.prefs'
        into '.settings'
    }
}

eclipseJdt {
    doLast {
        copy {
            from 'eclipse/org.eclipse.jdt.core.prefs'
            into '.settings'
        }
        copy {
            from 'eclipse/org.eclipse.jdt.ui.prefs'
            into '.settings'
        }
    }
}

